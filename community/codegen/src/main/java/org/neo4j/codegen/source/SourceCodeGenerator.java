/*
 * Copyright (c) 2002-2015 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.neo4j.codegen.source;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.tools.Diagnostic;
import javax.tools.DiagnosticCollector;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.ToolProvider;

import org.neo4j.codegen.ByteCodes;
import org.neo4j.codegen.ClassEmitter;
import org.neo4j.codegen.CodeGenerator;
import org.neo4j.codegen.CompilationFailureException;
import org.neo4j.codegen.TypeReference;

class SourceCodeGenerator extends CodeGenerator
{
    private final Configuration configuration;
    private final Map<TypeReference, StringBuilder> classes = new HashMap<>();

    SourceCodeGenerator( ClassLoader parentClassLoader, Configuration configuration )
    {
        super( parentClassLoader );
        this.configuration = configuration;
    }

    @Override
    protected ClassEmitter generate( TypeReference type, TypeReference base, TypeReference[] interfaces )
    {
        StringBuilder target = new StringBuilder().append( "package " ).append( type.packageName() ).append( ";\n" );
        target.append( "/** Generated by " ).append( getClass().getName() ).append( " */\n" );
        target.append( "public class " ).append( type.simpleName() )
              .append( " extends " ).append( base.name() ).append( "\n" );
        String prefix = "    implements ";
        for ( TypeReference iFace : interfaces )
        {
            target.append( prefix ).append( iFace.name() );
            prefix = ", ";
        }
        if ( prefix.length() == 2 )
        {
            target.append( "\n" );
        }
        target.append( "{\n" );
        synchronized ( this )
        {
            if ( null != classes.put( type, target ) )
            {
                throw new IllegalStateException( "Trying to generate class twice: " + type );
            }
        }
        return new ClassWriter( target );
    }

    protected Iterable<? extends ByteCodes> compile( ClassLoader classpathLoader ) throws CompilationFailureException
    {
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<>();

        FileManager fileManager = new FileManager(
                compiler.getStandardFileManager( diagnostics, configuration.locale(), configuration.chraset() ),
                classpathLoader );

        JavaCompiler.CompilationTask task = compiler.getTask(
                configuration.errorWriter(), fileManager, diagnostics, configuration.options(), null, sourceFiles() );

        configuration.processors( task );
        if ( task.call() )
        {
            configuration.warningsHandler().handle( diagnostics.getDiagnostics() );
            return fileManager.bytecodes();
        }
        else
        {
            @SuppressWarnings("unchecked")
            List<Diagnostic<?>> issues = (List) diagnostics.getDiagnostics();
            throw new CompilationFailureException( issues );
        }
    }

    private synchronized List<JavaSourceFile> sourceFiles()
    {
        List<JavaSourceFile> sourceFiles = new ArrayList<>( classes.size() );
        for ( Map.Entry<TypeReference, StringBuilder> entry : classes.entrySet() )
        {
            TypeReference reference = entry.getKey();
            StringBuilder source = entry.getValue();
            configuration.visit( reference, source );
            sourceFiles.add( new JavaSourceFile( configuration.sourceBase().uri(
                    reference.packageName(), reference.simpleName(), JavaFileObject.Kind.SOURCE ), source ) );
        }
        return sourceFiles;
    }
}
